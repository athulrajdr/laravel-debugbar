{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Laravel Debugbar","text":"<p>Laravel Debugbar is a package that integrates PHP Debug Bar with Laravel to debug database queries and profile other information.</p> <p></p> <p>Live Demo</p> <p>See an interactive example of the Laravel Debugbar in action below. (Don't worry, this is just dummy data)</p> <p>Get started View code </p>"},{"location":"collectors/","title":"Collectors","text":"<p>Warning</p> <p>Debugbar can slow the application down (because it has to gather and render data). So when experiencing slowness, try disabling some of the collectors.</p>"},{"location":"collectors/#collectors","title":"Collectors","text":"<p>This package includes with these Collectors enabled by default:</p> <ul> <li>Queries: Show all database queries</li> <li>Messages: Debug messages and objects</li> <li>Logger: Show all Log messages (Show in Messages when available)</li> <li>Views: Show the currently loaded views.</li> <li>Timeline: Timeline with Booting and Application timing</li> <li>Route: Show information about the current Route.</li> <li>Exceptions: Exceptions and Throwable with stacktrace</li> <li>Session: Current session data</li> <li>Request: Request data</li> <li>Livewire: Only active when Livewire is used</li> <li>PhpInfo: Current PHP version</li> </ul> <p>These collectors can be enabled in the config:</p> <ul> <li>Gate: Show the gates that are checked</li> <li>Events: Show all events</li> <li>Auth: Logged in status</li> <li>Mail: Sent emails</li> <li>Laravel Info: Show the Laravel version and Environment. </li> <li>Memory: Memory usage</li> <li>Config: Display the values from the config files.</li> <li>Cache: Display all cache events. </li> <li>Models: Loaded Models</li> <li>Jobs: Sent emails</li> <li>Logs: Logs from the log files</li> <li>Pennant: Show Pennant flags</li> <li>Files: Show the files that are included/required by PHP.</li> </ul> <p>To enable or disable any of the collectors, set the configuration to <code>true</code> or <code>false</code>. Some collector have additional options in the configuration:</p> config/debugbar.php <pre><code>   /*\n     |--------------------------------------------------------------------------\n     | DataCollectors\n     |--------------------------------------------------------------------------\n     |\n     | Enable/disable DataCollectors\n     |\n     */\n\n    'collectors' =&gt; [\n        'phpinfo'         =&gt; true,  // Php version\n        'messages'        =&gt; true,  // Messages\n        'time'            =&gt; true,  // Time Datalogger\n        'memory'          =&gt; true,  // Memory usage\n        'exceptions'      =&gt; true,  // Exception displayer\n        'log'             =&gt; true,  // Logs from Monolog (merged in messages if enabled)\n        'db'              =&gt; true,  // Show database (PDO) queries and bindings\n        'views'           =&gt; true,  // Views with their data\n        'route'           =&gt; true,  // Current route information\n        'auth'            =&gt; false, // Display Laravel authentication status\n        'gate'            =&gt; false,  // Display Laravel Gate checks\n        'session'         =&gt; true,  // Display session data\n        'symfony_request' =&gt; true,  // Only one can be enabled..\n        'mail'            =&gt; false,  // Catch mail messages\n        'laravel'         =&gt; false, // Laravel version and environment\n        'events'          =&gt; false, // All events fired\n        'default_request' =&gt; false, // Regular or special Symfony request logger\n        'logs'            =&gt; false, // Add the latest log messages\n        'files'           =&gt; false, // Show the included files\n        'config'          =&gt; false, // Display config settings\n        'cache'           =&gt; false, // Display cache events\n        'models'          =&gt; false,  // Display models\n        'livewire'        =&gt; true,  // Display Livewire (when available)\n        'jobs'            =&gt; false, // Display dispatched jobs\n        'pennant'         =&gt; false, // Display Pennant feature flags\n    ],\n</code></pre>"},{"location":"collectors/#db","title":"Database Queries","text":"<p>v1.0 collectors.db</p> <p>The Query Collector has the following features  - Show the executed queries including timing  - Show/mark duplicate queries  - Show used parameters  - Run on-demand 'EXPLAIN' queries and link to Visual Explain  (disabled bu default)  - Copy the query to clipboard  - Show the source of the query and open in editor  - Visualize the duration of the queries with bottom border  - Add queries to the timeline (disabled by default)  - Limit the number of queries to avoid slowing down the Debugbar.  - Exclude paths (eg. for session or vendors)  - Show memory usage (disabled by default)</p> <p></p> config/debugbar.php <pre><code>  'options' =&gt; [\n        // ...\n        'db' =&gt; [\n            'with_params'       =&gt; true,   // Render SQL with the parameters substituted\n            'exclude_paths'     =&gt; [       // Paths to exclude entirely from the collector\n                // 'vendor/laravel/framework/src/Illuminate/Session', // Exclude sessions queries\n            ],\n            'backtrace'         =&gt; true,   // Use a backtrace to find the origin of the query in your files.\n            'backtrace_exclude_paths' =&gt; [],   // Paths to exclude from backtrace. (in addition to defaults)\n            'timeline'          =&gt; false,  // Add the queries to the timeline\n            'duration_background'  =&gt; true,   // Show shaded background on each query relative to how long it took to execute.\n            'explain' =&gt; [                 // Show EXPLAIN output on queries\n                'enabled' =&gt; false,\n            ],\n            'hints'             =&gt; false,   // Show hints for common mistakes\n            'show_copy'         =&gt; true,    // Show copy button next to the query,\n            'slow_threshold'    =&gt; false,   // Only track queries that last longer than this time in ms\n            'memory_usage'      =&gt; false,   // Show queries memory usage\n            'soft_limit'       =&gt; 100,      // After the soft limit, no parameters/backtrace are captured\n            'hard_limit'       =&gt; 500,      // After the hard limit, queries are ignored\n        ],\n        // ...\n    ],\n</code></pre>"},{"location":"collectors/#on-demand-query-explain","title":"On-demand query EXPLAIN","text":"<p>v3.14.0 options.db.explain</p> <p>Enable the <code>options.db.explain</code> option to run on-demand EXPLAIN queries for any SELECT query in the Debugbar. This will update in the interface. You also have an option to navigate to mysqlexplain.com for a visual explain.</p> <p></p>"},{"location":"collectors/#query-limits","title":"Query limits","text":"<p>v3.10.0 options.db.soft_limit: 100 options.db.hard_limit: 500</p> <p>With Query Hard &amp; Soft limits, you can reduce the amount of queries shown by default. When the soft limit is reached, bindings will be excluded. When the hard limit is reached, the queries are excluded altogether to prevent loading too much data. If you want to avoid any limits, you can set the option to <code>null</code></p> <p></p>"},{"location":"collectors/#messages","title":"Messages","text":"<p>v1.0 collectors.messages</p> <p>The Message collectors gathers all messages from <code>debug()</code> calls and anything written to the logs.</p> <p>You can pass multiple parameters to <code>debug()</code>, even complex object.</p>"},{"location":"collectors/#trace","title":"Trace","text":"<p>When calling <code>debug()</code>, the source of the call is shown and can be opened with your IDE.</p> <p>v3.10.0 options.messages.trace</p> <p></p>"},{"location":"collectors/#log","title":"Logger","text":"<p>v1.0 collectors.log</p> <p>When the Messages Collector is enabled, Log messages are added to the Messages tab. Otherwise a Monolog tab will show with just the log messages</p> <p></p> config/debugbar.php <pre><code>  'options' =&gt; [\n        // ...\n        'db' =&gt; [\n            'with_params'       =&gt; true,   // Render SQL with the parameters substituted\n            'exclude_paths'     =&gt; [       // Paths to exclude entirely from the collector\n                // 'vendor/laravel/framework/src/Illuminate/Session', // Exclude sessions queries\n            ],\n            'backtrace'         =&gt; true,   // Use a backtrace to find the origin of the query in your files.\n            'backtrace_exclude_paths' =&gt; [],   // Paths to exclude from backtrace. (in addition to defaults)\n            'timeline'          =&gt; false,  // Add the queries to the timeline\n            'duration_background'  =&gt; true,   // Show shaded background on each query relative to how long it took to execute.\n            'explain' =&gt; [                 // Show EXPLAIN output on queries\n                'enabled' =&gt; false,\n            ],\n            'hints'             =&gt; false,   // Show hints for common mistakes\n            'show_copy'         =&gt; true,    // Show copy button next to the query,\n            'slow_threshold'    =&gt; false,   // Only track queries that last longer than this time in ms\n            'memory_usage'      =&gt; false,   // Show queries memory usage\n            'soft_limit'       =&gt; 100,      // After the soft limit, no parameters/backtrace are captured\n            'hard_limit'       =&gt; 500,      // After the hard limit, queries are ignored\n        ],\n        // ...\n    ],\n</code></pre>"},{"location":"collectors/#views","title":"Views","text":"<p>v1.0 collectors.views</p> <p>The ViewCollector shows views and has the following features:</p> <ul> <li>Show used templates and source</li> <li>Optionally add them to the timeline</li> <li>Group similar views (useful for components)</li> <li>Exclude folders (eg. for Filament or other vendors)</li> <li>Optionally show data (this can be resource heavy)</li> </ul> <p></p> <pre><code>    'options' =&gt; [\n        'views' =&gt; [\n            'timeline' =&gt; false,    // Add the views to the timeline (Experimental)\n            'data' =&gt; false,        //true for all data, 'keys' for only names, false for no parameters.\n            'group' =&gt; 50,          // Group duplicate views. Pass value to auto-group, or true/false to force\n            'exclude_paths' =&gt; [    // Add the paths which you don't want to appear in the views\n                'vendor/filament'   // Exclude Filament components by default\n            ],\n        ],\n    ]\n</code></pre>"},{"location":"collectors/#time","title":"Timeline","text":"<p>v1.0 collectors.time</p> <p></p> config/debugbar.php <pre><code>    'options' =&gt; [\n        'time' =&gt; [\n            'memory_usage' =&gt; false,  // Calculated by subtracting memory start and end, it may be inaccurate\n        ],\n    ]\n</code></pre>"},{"location":"collectors/#route","title":"Route","text":"<p>v1.0 collectors.route</p> <p>This shows the current route and middleware.</p> <p></p> config/debugbar.php <pre><code>    'options' =&gt; [\n        'route' =&gt; [\n            'label' =&gt; true,  // show complete route on bar\n        ],    \n    ],\n</code></pre>"},{"location":"collectors/#exceptions","title":"Exceptions","text":"<p>v1.0 collectors.exceptions</p> <p>Show any errors from the application, including traces.</p> <p>You can manually add exceptions by calling <code>debugbar()-&gt;addThrowable($throwable);</code></p> <p></p>"},{"location":"collectors/#session","title":"Session","text":"<p>v1.0 collectors.phpinfo false</p> <p>A simple widget showing the current PHP Version.</p> <p></p>"},{"location":"collectors/#request","title":"Request","text":"<p>v1.0 collectors.request</p> <p>Show Request info, like headers, data, cookies etc. Sensitive data is hidden by default, but you can add your own sensitive data to the config.</p> <p></p> config/debugbar.php <pre><code>    'options' =&gt; [\n        'symfony_request' =&gt; [\n            'hiddens' =&gt; [], // hides sensitive values using array paths, example: request_request.password\n        ],\n    ],\n</code></pre>"},{"location":"collectors/#livewire","title":"Livewire","text":"<p>v3.3.3 collectors.livewire</p> <p>Show the Livewire components that are rendered on the page.</p> <p></p>"},{"location":"collectors/#phpinfo","title":"PHP Info","text":"<p>v1.0 collectors.phpinfo</p> <p>A simple widget showing the current PHP Version.</p> <p></p>"},{"location":"collectors/#gate","title":"Gate","text":"<p>v2.1.0 collectors.gate false</p> <p>The Gate Collector shows the checks that have passed or failed.</p> <p></p>"},{"location":"collectors/#events","title":"Events","text":"<p>v1.0 collectors.events</p> <p>This is similar to the Timeline buts adds all events. This can be a lot of data, so use with caution.</p> <p></p> config/debugbar.php <pre><code>    'options' =&gt; [\n        'events' =&gt; [\n            'data' =&gt; false, // collect events data, listeners\n        ],\n    ],\n</code></pre>"},{"location":"collectors/#auth","title":"Auth","text":"<p>v1.2.2 collectors.auth false</p> <p>A widget showing the current login status + a collector with more information.</p> <p></p> config/debugbar.php <pre><code>    'options' =&gt; [\n        'auth' =&gt; [\n            'show_name' =&gt; true,   // Also show the users name/email in the debugbar\n            'show_guards' =&gt; true, // Show the guards that are used\n        ],\n    ],\n</code></pre>"},{"location":"collectors/#mail","title":"Mail","text":"<p>v1.0 collectors.mail false</p> <p>A collector showing the sent emails.</p> <p></p>"},{"location":"collectors/#mail-preview","title":"Mail Preview","text":"<p>v3.12.0 options.mail.show_body true</p> <p>You can open a rendered preview of the email when the body is attached, by clicking 'View Mail'</p> <p></p>"},{"location":"collectors/#laravel","title":"Laravel Info","text":"<p>v1.0 collectors.laravel false</p> <p>A widget showing the current Laravel Version, environment and locale.</p> <p></p>"},{"location":"collectors/#memory","title":"Memory Usage","text":"<p>v1.0 collectors.memory false</p> <p>Show the Memory Usage of the application</p> config/debugbar.php <pre><code>    'options' =&gt; [\n        'memory' =&gt; [\n            'reset_peak' =&gt; false,     // run memory_reset_peak_usage before collecting\n            'with_baseline' =&gt; false,  // Set boot memory usage as memory peak baseline\n            'precision' =&gt; 0,          // Memory rounding precision\n        ],\n    ]\n</code></pre> <p></p>"},{"location":"collectors/#config","title":"Config","text":"<p>v3.0 collectors.config false</p> <p>Warning</p> <p>Be careful when turning this on, as it can expose sensitive credentials. Make sure your app is not publicly available.</p> <p>Shows the loaded configuration values.</p> <p></p>"},{"location":"collectors/#cache","title":"Cache","text":"<p>v3.0.0 collectors.cache false</p> <p>Show the hits/misses of the Cache in a Timeline.</p> <p></p> config/debugbar.php <pre><code>    'options' =&gt; [\n        'cache' =&gt; [\n            'values' =&gt; true, // collect cache values\n        ],    ],\n</code></pre>"},{"location":"collectors/#models","title":"Models","text":"<p>collectors.models false</p> <p>Shows how often each Model is loaded. If this is high, you might want move some logic to SQL instead of processing large Collections.</p> <p></p>"},{"location":"collectors/#jobs","title":"Jobs","text":"<p>collectors.models false</p> <p>Show the Jobs that are dispatched from this request.</p> <p></p>"},{"location":"collectors/#logs","title":"Logs","text":"<p>collectors.logs false</p> <p>Show the most recent logs from the log files in storage/logs</p> <p></p> config/debugbar.php <pre><code>    'options' =&gt; [\n        'logs' =&gt; [\n            'file' =&gt; null, // Additional files\n        ],   \n     ],\n</code></pre>"},{"location":"collectors/#pennant","title":"Pennant","text":"<p>v3.14.0 collectors.pennant false</p> <p>Shows all the Pennant flags that are checked during this request</p> <p></p>"},{"location":"collectors/#files","title":"Files","text":"<p>v1.0 collectors.files false</p> <p>Deprecated</p> <p>This was mainly useful before OPcache was widely used, and this collector could be used for optimizing files. It's deprecated now.</p> <p></p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#collectors","title":"Collectors","text":"<p>See the Collectors page for available collectors.</p>"},{"location":"features/#ajax-requests","title":"AJAX Requests","text":"<p>Laravel Debugbar tracks AJAX/XHR request in your application. You can open these in the dropdown menu, or click the history button to show the requests.</p> <p>Tip: you can disable he 'autoshow' toggle in the history tab to keep the current dataset active, instead of switching.</p> <p></p> config/debugbar.php <pre><code>/*\n |--------------------------------------------------------------------------\n | Capture Ajax Requests\n |--------------------------------------------------------------------------\n |\n | The Debugbar can capture Ajax requests and display them. If you don't want this (ie. because of errors),\n | you can use this option to disable sending the data through the headers.\n |\n | Optionally, you can also send ServerTiming headers on ajax requests for the Chrome DevTools.\n |\n | Note for your request to be identified as ajax requests they must either send the header\n | X-Requested-With with the value XMLHttpRequest (most JS libraries send this), or have application/json as a Accept header.\n |\n | By default `ajax_handler_auto_show` is set to true allowing ajax requests to be shown automatically in the Debugbar.\n | Changing `ajax_handler_auto_show` to false will prevent the Debugbar from reloading.\n */\n\n'capture_ajax' =&gt; true,\n'add_ajax_timing' =&gt; false,\n'ajax_handler_auto_show' =&gt; true,\n'ajax_handler_enable_tab' =&gt; true,\n</code></pre>"},{"location":"features/#history-browser","title":"History browser","text":"<p>By default, Debugbar stores request history. This is useful for non-browser requests, redirects or external requests. You can open it with the 'folder' button (3rd from the right).</p> <p>With the default settings, storage is only visible from your local IP. To enable browsing the history, change the <code>storage.open</code> setting or <code>DEBUGBAR_OPEN_STORAGE</code> env key.</p> <p>Warning</p> <p>Do not open the history outside your local environment, to avoid leaking credentials or sensitive data.</p> <p></p> config/debugbar.php <pre><code>    /*\n     |--------------------------------------------------------------------------\n     | Storage settings\n     |--------------------------------------------------------------------------\n     |\n     | DebugBar stores data for session/ajax requests.\n     | You can disable this, so the debugbar stores data in headers/session,\n     | but this can cause problems with large data collectors.\n     | By default, file storage (in the storage folder) is used. Redis and PDO\n     | can also be used. For PDO, run the package migrations first.\n     |\n     | Warning: Enabling storage.open will allow everyone to access previous\n     | request, do not enable open storage in publicly available environments!\n     | Specify a callback if you want to limit based on IP or authentication.\n     | Leaving it to null will allow localhost only.\n     */\n    'storage' =&gt; [\n        'enabled'    =&gt; true,\n        'open'       =&gt; env('DEBUGBAR_OPEN_STORAGE'), // bool/callback.\n        'driver'     =&gt; 'file', // redis, file, pdo, socket, custom\n        'path'       =&gt; storage_path('debugbar'), // For file driver\n        'connection' =&gt; null,   // Leave null for default connection (Redis/PDO)\n        'provider'   =&gt; '', // Instance of StorageInterface for custom driver\n        'hostname'   =&gt; '127.0.0.1', // Hostname to use with the \"socket\" driver\n        'port'       =&gt; 2304, // Port to use with the \"socket\" driver\n    ],\n</code></pre>"},{"location":"features/#light-and-dark-mode-theme","title":"Light and Dark mode Theme","text":"<p>v3.4.0 theme auto</p> <p>Debugbar supports Dark and Light mode. It defaults to <code>auto</code> which uses the browser setting. You can set it with <code>DEBUGBAR_THEME</code> or change the config to force th <code>light</code> or <code>dark</code>. See Light Mode below:</p> <p></p>"},{"location":"features/#editor-integration","title":"Editor integration","text":"<p>Debugbar can open links to views, exception, routes etc in your Editor directly, if you set this up correctly. By default this should just work for PHPStorm on local development. You can change your editor by setting <code>DEBUGBAR_EDITOR</code> or the config. If your working in a remote host or docker, you can change the mapping between remote and local paths.</p> <p></p> config/debugbar.php <pre><code>/*\n    |--------------------------------------------------------------------------\n    | Editor\n    |--------------------------------------------------------------------------\n    |\n    | Choose your preferred editor to use when clicking file name.\n    |\n    | Supported: \"phpstorm\", \"vscode\", \"vscode-insiders\", \"vscode-remote\",\n    |            \"vscode-insiders-remote\", \"vscodium\", \"textmate\", \"emacs\",\n    |            \"sublime\", \"atom\", \"nova\", \"macvim\", \"idea\", \"netbeans\",\n    |            \"xdebug\", \"espresso\"\n    |\n    */\n\n    'editor' =&gt; env('DEBUGBAR_EDITOR') ?: env('IGNITION_EDITOR', 'phpstorm'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Remote Path Mapping\n    |--------------------------------------------------------------------------\n    |\n    | If you are using a remote dev server, like Laravel Homestead, Docker, or\n    | even a remote VPS, it will be necessary to specify your path mapping.\n    |\n    | Leaving one, or both of these, empty or null will not trigger the remote\n    | URL changes and Debugbar will treat your editor links as local files.\n    |\n    | \"remote_sites_path\" is an absolute base path for your sites or projects\n    | in Homestead, Vagrant, Docker, or another remote development server.\n    |\n    | Example value: \"/home/vagrant/Code\"\n    |\n    | \"local_sites_path\" is an absolute base path for your sites or projects\n    | on your local computer where your IDE or code editor is running on.\n    |\n    | Example values: \"/Users/&lt;name&gt;/Code\", \"C:\\Users\\&lt;name&gt;\\Documents\\Code\"\n    |\n    */\n\n    'remote_sites_path' =&gt; env('DEBUGBAR_REMOTE_SITES_PATH'),\n    'local_sites_path' =&gt; env('DEBUGBAR_LOCAL_SITES_PATH', env('IGNITION_LOCAL_SITES_PATH')),\n</code></pre>"},{"location":"features/#configuraton","title":"Configuraton","text":""},{"location":"features/#custom","title":"Custom features","text":"<p>Custom features or collectors are not enabled by default, but can be enabled by enabling the configuration setting. This is usually because the target audience of a feature is not large enough.</p>"},{"location":"features/#config","title":"Configurable options","text":"<p>Configurable features are not enabled by default, but can be enabled. This is usually because the target audience of a feature is not large enough. You can enable the feature by changing the mentioned value in config/debugbar.php after publishing the config.</p>"},{"location":"features/#experimental","title":"Experimental Features","text":"<p>Some features are marked as 'Experimental'. This mostly means the feature is new and not enabled by default, but might become enable by default in the future. You are welcome to test this feature and report any issues. </p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-with-composer","title":"Install with composer","text":"<p>Danger</p> <p>Use the Debugbar only in development. Do not use Debugbar on publicly accessible websites, as it will leak information from stored requests (by design).</p> <p>Require this package with composer. It is recommended to only require the package for development.</p> <pre><code>composer require barryvdh/laravel-debugbar --dev\n</code></pre> <p>Laravel uses Package Auto-Discovery, so doesn't require you to manually add the ServiceProvider.</p> <p>If you use a catch-all/fallback route, make sure you load the Debugbar ServiceProvider before your own App ServiceProviders.</p>"},{"location":"installation/#enable","title":"Enable","text":"<p>By default, Debugbar will be enabled when <code>APP_DEBUG</code> is <code>true</code>.</p> <p>The profiler is enabled by default, if you have APP_DEBUG=true. You can override that in the config (<code>debugbar.enabled</code>) or by setting <code>DEBUGBAR_ENABLED</code> in your <code>.env</code>. See more options in <code>config/debugbar.php</code></p> <pre><code>    /*\n     |--------------------------------------------------------------------------\n     | Debugbar Settings\n     |--------------------------------------------------------------------------\n     |\n     | Debugbar is enabled by default, when debug is set to true in app.php.\n     | You can override the value by setting enable to true or false instead of null.\n     |\n     | You can provide an array of URI's that must be ignored (eg. 'api/*')\n     |\n     */\n\n    'enabled' =&gt; env('DEBUGBAR_ENABLED', null),\n    'hide_empty_tabs' =&gt; false, // Hide tabs until they have content\n    'except' =&gt; [\n        'telescope*',\n        'horizon*',\n    ],\n</code></pre>"},{"location":"installation/#publish-config","title":"Publish config","text":"<pre><code>php artisan vendor:publish --provider=\"Barryvdh\\Debugbar\\ServiceProvider\"\n</code></pre>"},{"location":"installation/#non-default-installs","title":"Non-default installs","text":""},{"location":"installation/#without-auto-discovery","title":"Without auto-discovery","text":"<p>If you don't use auto-discovery, add the ServiceProvider to the providers list. For Laravel 11 or newer, add the ServiceProvider in bootstrap/providers.php. For Laravel 10 or older, add the ServiceProvider in config/app.php.</p> <pre><code>Barryvdh\\Debugbar\\ServiceProvider::class,\n</code></pre> <p>If you want to use the facade to log messages, add this within the <code>register</code> method of <code>app/Providers/AppServiceProvider.php</code> class:</p> <pre><code>public function register(): void\n{\n    $loader = \\Illuminate\\Foundation\\AliasLoader::getInstance();\n    $loader-&gt;alias('Debugbar', \\Barryvdh\\Debugbar\\Facades\\Debugbar::class);\n}\n</code></pre>"},{"location":"installation/#with-octane","title":"With Octane","text":"<p>Make sure to add LaravelDebugbar to your flush list in <code>config/octane.php</code>.</p> <pre><code>    'flush' =&gt; [\n        \\Barryvdh\\Debugbar\\LaravelDebugbar::class,\n    ],\n</code></pre>"},{"location":"installation/#with-lumen","title":"With Lumen","text":"<p>For Lumen, register a different Provider in <code>bootstrap/app.php</code>:</p> <pre><code>if (env('APP_DEBUG')) {\n $app-&gt;register(Barryvdh\\Debugbar\\LumenServiceProvider::class);\n}\n</code></pre> <p>To change the configuration, copy the file to your config folder and enable it:</p> <pre><code>$app-&gt;configure('debugbar');\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#using-the-debugbar","title":"Using the Debugbar","text":"<p>When the Debugbar is enabled, the Debugbar is shown on the bottom of the screen, similar to the documentation preview.</p> <p>Based on your configuration, it shows the Collectors for the current request. You can open, close, restore or minimize the toolbar for your need. The state will be remembered.</p> <p></p>"},{"location":"usage/#debugbar-facade","title":"Debugbar Facade","text":"<p>You can now add messages using the Facade (when added), using the PSR-3 levels (debug, info, notice, warning, error, critical, alert, emergency):</p> <pre><code>Debugbar::info($object);\nDebugbar::error('Error!');\nDebugbar::warning('Watch out\u2026');\nDebugbar::addMessage('Another message', 'mylabel');\n</code></pre> <p>And start/stop timing:</p> <pre><code>Debugbar::startMeasure('render','Time for rendering');\nDebugbar::stopMeasure('render');\nDebugbar::addMeasure('now', LARAVEL_START, microtime(true));\nDebugbar::measure('My long operation', function() {\n    // Do something\u2026\n});\n</code></pre> <p>Or log exceptions:</p> <pre><code>try {\n    throw new Exception('foobar');\n} catch (Exception $e) {\n    Debugbar::addThrowable($e);\n}\n</code></pre>"},{"location":"usage/#helpers","title":"Helpers","text":"<p>There are also helper functions available for the most common calls:</p> <pre><code>// All arguments will be dumped as a debug message\ndebug($var1, $someString, $intValue, $object);\n\n// `$collection-&gt;debug()` will return the collection and dump it as a debug message. Like `$collection-&gt;dump()`\ncollect([$var1, $someString])-&gt;debug();\n\nstart_measure('render','Time for rendering');\nstop_measure('render');\nadd_measure('now', LARAVEL_START, microtime(true));\nmeasure('My long operation', function() {\n    // Do something\u2026\n});\n</code></pre> <p>If you want you can add your own DataCollectors, through the Container or the Facade:</p> <pre><code>Debugbar::addCollector(new DebugBar\\DataCollector\\MessagesCollector('my_messages'));\n//Or via the App container:\n$debugbar = App::make('debugbar');\n$debugbar-&gt;addCollector(new DebugBar\\DataCollector\\MessagesCollector('my_messages'));\n</code></pre>"},{"location":"usage/#enablingdisabling-on-run-time","title":"Enabling/Disabling on run time","text":"<p>You can enable or disable the debugbar during run time.</p> <pre><code>\\Debugbar::enable();\n\\Debugbar::disable();\n</code></pre> <p>NB. Once enabled, the collectors are added (and could produce extra overhead), so if you want to use the debugbar in production, disable in the config and only enable when needed.</p>"},{"location":"usage/#storage","title":"Storage","text":"<p>Debugbar remembers previous requests, which you can view using the Browse button on the right. This will only work if you enable <code>debugbar.storage.open</code> in the config. Make sure you only do this on local development, because otherwise other people will be able to view previous requests. In general, Debugbar should only be used locally or at least restricted by IP. It's possible to pass a callback, which will receive the Request object, so you can determine access to the OpenHandler storage.</p>"},{"location":"usage/#twig-integration","title":"Twig Integration","text":"<p>Laravel Debugbar comes with two Twig Extensions. These are tested with rcrowe/TwigBridge 0.6.x</p> <p>Add the following extensions to your TwigBridge config/extensions.php (or register the extensions manually)</p> <pre><code>'Barryvdh\\Debugbar\\Twig\\Extension\\Debug',\n'Barryvdh\\Debugbar\\Twig\\Extension\\Dump',\n'Barryvdh\\Debugbar\\Twig\\Extension\\Stopwatch',\n</code></pre> <p>The Dump extension will replace the dump function to output variables using the DataFormatter. The Debug extension adds a <code>debug()</code> function which passes variables to the Message Collector, instead of showing it directly in the template. It dumps the arguments, or when empty; all context variables.</p> <pre><code>{{ debug() }}\n{{ debug(user, categories) }}\n</code></pre> <p>The Stopwatch extension adds a stopwatch tag  similar to the one in Symfony/Silex Twigbridge.</p> <pre><code>{% stopwatch \"foo\" %}\n    \u2026some things that gets timed\n{% endstopwatch %}\n</code></pre>"}]}